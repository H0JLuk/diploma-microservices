generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test {
  id              Int         @id @default(autoincrement())
  name            String
  startTime       DateTime    @map("start_time")
  endTime         DateTime    @map("end_time")
  duration        Int?
  isRandomAnswers Boolean     @default(false) @map("is_random_answers")
  hidden          Boolean     @default(false)
  creatorId       Int         @map("creator_id")
  subjectId       Int         @map("subject_id")
  subject         testSubject @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  questions       question[]

  @@unique([name, subjectId])
}

model testSubject {
  id    Int    @id @default(autoincrement())
  name  String @unique
  tests test[]

  @@map("subject")
}

model questionCategory {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  question question[]

  @@map("question_category")
}

model question {
  id         Int                @id() @default(autoincrement())
  text       String             @db.Text
  image      String?            @db.Text
  type       QuestionType
  category   questionCategory   @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  answers    answerToQuestion[]
  test       test               @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId     Int                @map("test_id")
  categoryId Int                @map("category_id")

  @@unique([text, image, testId])
}

model answerToQuestion {
  id                Int                 @id() @default(autoincrement())
  text              String?             @db.Text
  image             String?             @db.Text
  isRight           Boolean             @default(false) @map("is_right")
  questionId        Int                 @map("question_id")
  question          question            @relation(fields: [questionId], references: [id], onDelete: Cascade)
  testHistoryAnswer testHistoryAnswer[]

  @@map("answer_to_question")
}

model testHistory {
  id         Int                 @id() @default(autoincrement())
  startTime  DateTime            @default(now()) @map("start_time")
  studentId  Int                 @map("student_id")
  finishedAt DateTime?           @map("finished_at")
  answers    testHistoryAnswer[]

  @@map("test_history")
}

model testHistoryAnswer {
  testHistoryId    Int
  questionAnswerId Int
  history          testHistory       @relation(fields: [testHistoryId], references: [id], onDelete: Cascade)
  answer           answerToQuestion? @relation(fields: [questionAnswerId], references: [id], onDelete: Restrict)

  @@unique([testHistoryId, questionAnswerId])
  @@map("test_history_answer")
}

// ENUMS

enum QuestionType {
  single
  multiple
  input

  @@map("enum_question_type")
}
